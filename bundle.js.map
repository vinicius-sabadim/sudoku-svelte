{"version":3,"file":"bundle.js","sources":["../node_modules/svelte/internal/index.mjs","../src/Info.svelte","../src/Cell.svelte","../src/utils.js","../src/App.svelte","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (!store || typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(component, store, callback) {\n    const unsub = store.subscribe(callback);\n    component.$$.on_destroy.push(unsub.unsubscribe\n        ? () => unsub.unsubscribe()\n        : unsub);\n}\nfunction create_slot(definition, ctx, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, fn) {\n    return definition[1]\n        ? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {})))\n        : ctx.$$scope.ctx;\n}\nfunction get_slot_changes(definition, ctx, changed, fn) {\n    return definition[1]\n        ? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {})))\n        : ctx.$$scope.changed || {};\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? requestAnimationFrame : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nlet running = false;\nfunction run_tasks() {\n    tasks.forEach(task => {\n        if (!task[0](now())) {\n            tasks.delete(task);\n            task[1]();\n        }\n    });\n    running = tasks.size > 0;\n    if (running)\n        raf(run_tasks);\n}\nfunction clear_loops() {\n    // for testing...\n    tasks.forEach(task => tasks.delete(task));\n    running = false;\n}\nfunction loop(fn) {\n    let task;\n    if (!running) {\n        running = true;\n        raf(run_tasks);\n    }\n    return {\n        promise: new Promise(fulfil => {\n            tasks.add(task = [fn, fulfil]);\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction detach_between(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        before.parentNode.removeChild(before.nextSibling);\n    }\n}\nfunction detach_before(after) {\n    while (after.previousSibling) {\n        after.parentNode.removeChild(after.previousSibling);\n    }\n}\nfunction detach_after(before) {\n    while (before.nextSibling) {\n        before.parentNode.removeChild(before.nextSibling);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction object_without_properties(obj, exclude) {\n    // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion\n    const target = {};\n    for (const k in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    for (const key in attributes) {\n        if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key in node) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            for (let j = 0; j < node.attributes.length; j += 1) {\n                const attribute = node.attributes[j];\n                if (!attributes[attribute.name])\n                    node.removeAttribute(attribute.name);\n            }\n            return nodes.splice(i, 1)[0]; // TODO strip unwanted attributes\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value) {\n    node.style.setProperty(key, value);\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\nfunction add_resize_listener(element, fn) {\n    if (getComputedStyle(element).position === 'static') {\n        element.style.position = 'relative';\n    }\n    const object = document.createElement('object');\n    object.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;');\n    object.type = 'text/html';\n    let win;\n    object.onload = () => {\n        win = object.contentDocument.defaultView;\n        win.addEventListener('resize', fn);\n    };\n    if (/Trident/.test(navigator.userAgent)) {\n        element.appendChild(object);\n        object.data = 'about:blank';\n    }\n    else {\n        object.data = 'about:blank';\n        element.appendChild(object);\n    }\n    return {\n        cancel: () => {\n            win && win.removeEventListener && win.removeEventListener('resize', fn);\n            element.removeChild(object);\n        }\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\n\nlet stylesheet;\nlet active = 0;\nlet current_rules = {};\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    if (!current_rules[name]) {\n        if (!stylesheet) {\n            const style = element('style');\n            document.head.appendChild(style);\n            stylesheet = style.sheet;\n        }\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    node.style.animation = (node.style.animation || '')\n        .split(', ')\n        .filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    )\n        .join(', ');\n    if (name && !--active)\n        clear_rules();\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        let i = stylesheet.cssRules.length;\n        while (i--)\n            stylesheet.deleteRule(i);\n        current_rules = {};\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now$$1 => {\n        if (!started && now$$1 >= start_time) {\n            started = true;\n        }\n        if (started && now$$1 >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now$$1 - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_render.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_render.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = current_component;\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_binding_callback(fn) {\n    binding_callbacks.push(fn);\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nfunction flush() {\n    const seen_callbacks = new Set();\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (dirty_components.length) {\n            const component = dirty_components.shift();\n            set_current_component(component);\n            update(component.$$);\n        }\n        while (binding_callbacks.length)\n            binding_callbacks.shift()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        while (render_callbacks.length) {\n            const callback = render_callbacks.pop();\n            if (!seen_callbacks.has(callback)) {\n                callback();\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n            }\n        }\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n}\nfunction update($$) {\n    if ($$.fragment) {\n        $$.update($$.dirty);\n        run_all($$.before_render);\n        $$.fragment.p($$.dirty, $$.ctx);\n        $$.dirty = null;\n        $$.after_render.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nlet outros;\nfunction group_outros() {\n    outros = {\n        remaining: 0,\n        callbacks: []\n    };\n}\nfunction check_outros() {\n    if (!outros.remaining) {\n        run_all(outros.callbacks);\n    }\n}\nfunction on_outro(callback) {\n    outros.callbacks.push(callback);\n}\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick$$1(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now$$1 => {\n            if (running) {\n                if (now$$1 >= end_time) {\n                    tick$$1(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now$$1 >= start_time) {\n                    const t = easing((now$$1 - start_time) / duration);\n                    tick$$1(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.remaining += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now$$1 => {\n            if (running) {\n                if (now$$1 >= end_time) {\n                    tick$$1(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.remaining) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.callbacks);\n                    }\n                    return false;\n                }\n                if (now$$1 >= start_time) {\n                    const t = easing((now$$1 - start_time) / duration);\n                    tick$$1(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.remaining += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick$$1(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now$$1 => {\n                if (pending_program && now$$1 > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now$$1 >= running_program.end) {\n                        tick$$1(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.remaining)\n                                    run_all(running_program.group.callbacks);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now$$1 >= running_program.start) {\n                        const p = now$$1 - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick$$1(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = key && { [key]: value };\n        const child_ctx = assign(assign({}, info.ctx), info.resolved);\n        const block = type && (info.current = type)(child_ctx);\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        on_outro(() => {\n                            block.d(1);\n                            info.blocks[i] = null;\n                        });\n                        block.o(1);\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            if (block.i)\n                block.i(1);\n            block.m(info.mount(), info.anchor);\n            flush();\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n    }\n    if (is_promise(promise)) {\n        promise.then(value => {\n            update(info.then, 1, info.value, value);\n        }, error => {\n            update(info.catch, 2, info.error, error);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = { [info.value]: promise };\n    }\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    on_outro(() => {\n        destroy_block(block, lookup);\n    });\n    block.o(1);\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, changed, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(changed, child_ctx);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        if (block.i)\n            block.i(1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction measure(blocks) {\n    const rects = {};\n    let i = blocks.length;\n    while (i--)\n        rects[blocks[i].key] = blocks[i].node.getBoundingClientRect();\n    return rects;\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args) {\n    const attributes = Object.assign({}, ...args);\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === undefined)\n            return;\n        if (value === true)\n            str += \" \" + name;\n        const escaped = String(value)\n            .replace(/\"/g, '&#34;')\n            .replace(/'/g, '&#39;');\n        str += \" \" + name + \"=\" + JSON.stringify(escaped);\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_render: [],\n            after_render: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.head\n            };\n        },\n        $$render\n    };\n}\nfunction get_store_value(store) {\n    let value;\n    store.subscribe(_ => value = _)();\n    return value;\n}\n\nfunction bind(component, name, callback) {\n    if (component.$$.props.indexOf(name) === -1)\n        return;\n    component.$$.bound[name] = callback;\n    callback(component.$$.ctx[name]);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_render } = component.$$;\n    fragment.m(target, anchor);\n    // onMount happens after the initial afterUpdate. Because\n    // afterUpdate callbacks happen in reverse order (inner first)\n    // we schedule onMount callbacks before afterUpdate callbacks\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_render.forEach(add_render_callback);\n}\nfunction destroy(component, detaching) {\n    if (component.$$) {\n        run_all(component.$$.on_destroy);\n        component.$$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        component.$$.on_destroy = component.$$.fragment = null;\n        component.$$.ctx = {};\n    }\n}\nfunction make_dirty(component, key) {\n    if (!component.$$.dirty) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty = blank_object();\n    }\n    component.$$.dirty[key] = true;\n}\nfunction init(component, options, instance, create_fragment, not_equal$$1, prop_names) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const props = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props: prop_names,\n        update: noop,\n        not_equal: not_equal$$1,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_render: [],\n        after_render: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty: null\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, props, (key, value) => {\n            if ($$.ctx && not_equal$$1($$.ctx[key], $$.ctx[key] = value)) {\n                if ($$.bound[key])\n                    $$.bound[key](value);\n                if (ready)\n                    make_dirty(component, key);\n            }\n        })\n        : props;\n    $$.update();\n    ready = true;\n    run_all($$.before_render);\n    $$.fragment = create_fragment($$.ctx);\n    if (options.target) {\n        if (options.hydrate) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment.l(children(options.target));\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment.c();\n        }\n        if (options.intro && component.$$.fragment.i)\n            component.$$.fragment.i();\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement !== 'undefined') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr$$1, _oldValue, newValue) {\n            this[attr$$1] = newValue;\n        }\n        $destroy() {\n            destroy(this, true);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy(this, true);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n}\n\nexport { create_animation, fix_position, add_transform, handle_promise, append, insert, detach, detach_between, detach_before, detach_after, destroy_each, element, object_without_properties, svg_element, text, space, empty, listen, prevent_default, stop_propagation, attr, set_attributes, set_custom_element_data, xlink_attr, get_binding_group_value, to_number, time_ranges_to_array, children, claim_element, claim_text, set_data, set_input_type, set_style, select_option, select_options, select_value, select_multiple_value, add_resize_listener, toggle_class, custom_event, destroy_block, outro_and_destroy_block, fix_and_destroy_block, fix_and_outro_and_destroy_block, update_keyed_each, measure, current_component, set_current_component, beforeUpdate, onMount, afterUpdate, onDestroy, createEventDispatcher, setContext, getContext, bubble, clear_loops, loop, dirty_components, intros, schedule_update, tick, add_binding_callback, add_render_callback, add_flush_callback, flush, get_spread_update, invalid_attribute_name_character, spread, escaped, escape, each, missing_component, validate_component, debug, create_ssr_component, get_store_value, group_outros, check_outros, on_outro, create_in_transition, create_out_transition, create_bidirectional_transition, noop, identity, assign, is_promise, add_location, run, blank_object, run_all, is_function, safe_not_equal, not_equal, validate_store, subscribe, create_slot, get_slot_context, get_slot_changes, exclude_internal_props, once, now, raf, set_now, set_raf, bind, mount_component, init, SvelteElement, SvelteComponent, SvelteComponentDev };\n","<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  export let isVictory;\n  export let selectedDifficult;\n\n  const dispatch = createEventDispatcher();\n  const handleChange = difficult => {\n    dispatch(\"change-difficult\", difficult);\n  };\n\n  const levels = [\"easy\", \"medium\", \"hard\", \"veryHard\", \"insane\"];\n  const levelText = {\n    easy: \"Easy\",\n    medium: \"Medium\",\n    hard: \"Hard\",\n    veryHard: \"Very hard\",\n    insane: \"Insane\"\n  };\n</script>\n\n<style>\n  .container {\n    margin-right: 50px;\n  }\n\n  h1 {\n    font-size: 1.6rem;\n    margin: 1rem 0;\n  }\n\n  ul.level-menu {\n    width: 200px;\n  }\n\n  .level-menu li {\n    border-bottom: 1px solid #555;\n    cursor: pointer;\n    padding: 10px;\n    transition: all 0.3s;\n    user-select: none;\n  }\n\n  .level-menu li:hover {\n    padding-left: 20px;\n  }\n\n  .hint-container {\n    margin-top: 40px;\n    width: 250px;\n  }\n\n  .hint-container h2 {\n    font-size: 1.4rem;\n    margin-bottom: 1rem;\n  }\n\n  .hint-container li {\n    padding: 5px 0;\n  }\n\n  .active {\n    background-color: burlywood;\n    color: white;\n    font-weight: bold;\n  }\n\n  .victory {\n    animation: pulse 0.5s alternate infinite;\n    color: brown;\n    font-size: 2rem;\n    font-weight: bold;\n    margin: 2rem 0;\n    padding: 0 10px;\n  }\n\n  @keyframes pulse {\n    from {\n      transform: scale(1);\n    }\n    to {\n      transform: scale(0.9);\n    }\n  }\n</style>\n\n<div class=\"container\">\n  <h1>Change level</h1>\n  <ul class=\"level-menu\">\n    {#each levels as level}\n      <li\n        class={level === selectedDifficult ? 'active' : ''}\n        on:click={() => handleChange(level)}>\n         {levelText[level]}\n      </li>\n    {/each}\n  </ul>\n\n  <div class=\"hint-container\">\n    <h2>Hints</h2>\n    <ul>\n      <li>Use the number 0 to erase a cell.</li>\n      <li>Use ctrl + number to fill a cell using a pencil.</li>\n    </ul>\n  </div>\n\n  {#if isVictory}\n    <p class=\"victory\">Victory :)</p>\n  {/if}\n</div>\n","<script>\n  import { createEventDispatcher } from \"svelte\";\n\n  export let cell;\n  export let activeCellUsingKeyboard;\n\n  const options = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const dispatch = createEventDispatcher();\n  const handleChange = e => {\n    const value = parseInt(e.key);\n    const isCtrlPressed = e.ctrlKey;\n\n    // 0 will be used to remove a value from cell\n    if (Number.isInteger(value)) {\n      if (!isCtrlPressed) {\n        dispatch(\"pen\", {\n          value: parseInt(value, 10),\n          position: cell.position\n        });\n      } else {\n        dispatch(\"pencil\", {\n          value: parseInt(value, 10),\n          position: cell.position\n        });\n      }\n    }\n  };\n\n  const putFocus = e => {\n    const element = e.currentTarget.querySelector(\"input\");\n    element.focus();\n  };\n</script>\n\n<style>\n  input {\n    border: none;\n    color: transparent;\n    height: 100%;\n    margin: 0;\n    text-align: center;\n    text-shadow: 0 0 0 darkslategray;\n    user-select: none;\n    width: 100%;\n  }\n\n  input:focus {\n    background-color: whitesmoke;\n    border: none;\n    outline: none;\n  }\n\n  input:disabled {\n    background-color: inherit;\n  }\n\n  .hasError,\n  .hasError:focus {\n    background-color: lavenderblush;\n    text-shadow: 0 0 0 salmon;\n  }\n\n  .container {\n    height: 100%;\n  }\n\n  .pencil-container {\n    display: grid;\n    font-size: 18px;\n    grid:\n      \"option1 option2 option3\"\n      \"option4 option5 option6\"\n      \"option7 option8 option9\";\n    height: 100%;\n    left: 0;\n    position: absolute;\n    text-align: center;\n    top: 0;\n    width: 100%;\n  }\n\n  .option {\n    align-items: center;\n    color: transparent;\n    display: flex;\n    justify-content: center;\n  }\n\n  .visibleOption {\n    color: darkslategray;\n  }\n\n  .option1 {\n    grid-area: option1;\n  }\n  .option2 {\n    grid-area: option2;\n  }\n  .option3 {\n    grid-area: option3;\n  }\n  .option4 {\n    grid-area: option4;\n  }\n  .option5 {\n    grid-area: option5;\n  }\n  .option6 {\n    grid-area: option6;\n  }\n  .option7 {\n    grid-area: option7;\n  }\n  .option8 {\n    grid-area: option8;\n  }\n  .option9 {\n    grid-area: option9;\n  }\n\n  .keyboardActive {\n    background-color: aliceblue !important;\n  }\n</style>\n\n<div class=\"container\" on:click={putFocus}>\n  <!-- {cell.position} -->\n  <input\n    bind:value={cell.value}\n    class={`${cell.error ? 'hasError' : ''} ${cell.position === activeCellUsingKeyboard ? 'keyboardActive' : ''}`}\n    disabled={cell.readonly}\n    type=\"text\"\n    on:keydown|preventDefault={handleChange} />\n  {#if !cell.value}\n    <ul class=\"pencil-container\">\n      {#each options as option}\n        <li\n          class={`option option${option} ${cell.pencil.has(option) ? 'visibleOption' : ''}`}>\n           {option}\n        </li>\n      {/each}\n    </ul>\n  {/if}\n</div>\n","const blocks2 = [Array(2).fill([1, 1, 2, 2]), Array(2).fill([3, 3, 4, 4])].flat(\n  2\n)\n\nconst blocks3 = [\n  Array(3).fill([1, 1, 1, 2, 2, 2, 3, 3, 3]),\n  Array(3).fill([4, 4, 4, 5, 5, 5, 6, 6, 6]),\n  Array(3).fill([7, 7, 7, 8, 8, 8, 9, 9, 9])\n].flat(2)\n\nexport const generateGrid = (blockSize = 3) => {\n  const elements = blockSize === 3 ? 81 : 16\n  return Array(elements).fill(0)\n}\n\nconst shuffle = a => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    ;[a[i], a[j]] = [a[j], a[i]]\n  }\n  return a\n}\n\nexport const fillGrid = (grid, blockSize = 3) => {\n  const gridSize = blockSize === 3 ? 9 : 4\n\n  const stack = []\n  let currentIndex = 0\n  let currentValue = grid[currentIndex]\n\n  let numbers = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  let numberIndex = 0\n\n  while (hasZeros(grid)) {\n    if (currentValue === 0) {\n      if (\n        isLegal(grid, currentIndex, numbers[numberIndex], blockSize) &&\n        numberIndex < gridSize\n      ) {\n        grid[currentIndex] = numbers[numberIndex]\n        stack.push(currentIndex)\n        numbers = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9])\n        numberIndex = -1\n        currentIndex = currentIndex + 1\n        currentValue = grid[currentIndex]\n      } else if (numberIndex > gridSize - 1) {\n        grid[currentIndex] = 0\n        currentIndex = stack.pop()\n        numberIndex = numbers.indexOf(grid[currentIndex])\n        grid[currentIndex] = 0\n      }\n    } else {\n      currentIndex = currentIndex + 1\n      currentValue = grid[currentIndex]\n      numbers = shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9])\n      numberIndex = -1\n    }\n    numberIndex = numberIndex + 1\n  }\n  return grid\n}\n\nexport const includeBlockInfo = (grid, blockSize = 3) => {\n  const blocks = blockSize === 3 ? blocks3 : blocks2\n\n  return grid.map((cell, index) => ({\n    value: cell,\n    block: blocks[index],\n    position: index,\n    readonly: !!cell,\n    pencil: new Set()\n  }))\n}\n\nexport const groupByBlock = grid => {\n  return grid.reduce((acc, cell) => {\n    // The blocks starts at 1\n    const block = cell.block - 1\n\n    if (acc[block]) {\n      acc[block].push(cell)\n    } else {\n      acc[block] = [cell]\n    }\n    return acc\n  }, [])\n}\n\nconst numberOfCells = {\n  easy: 62,\n  medium: 53,\n  hard: 44,\n  veryHard: 35,\n  insane: 26\n}\n\nexport const applyGameDifficult = (difficult, grid) => {\n  const indexes = new Set()\n  while (indexes.size !== 81 - numberOfCells[difficult]) {\n    const randomIndex = Math.floor(Math.random() * 81)\n    indexes.add(randomIndex)\n  }\n  for (const index of indexes) {\n    grid[index] = null\n  }\n  return grid\n}\n\nexport const isLegal = (grid, position, number, blockSize = 3) => {\n  const usedNumbers = new Set()\n\n  const gridSize = blockSize === 3 ? 9 : 4\n  const blocks = blockSize === 3 ? blocks3 : blocks2\n\n  // Row\n  const row = Math.floor(position / gridSize)\n  grid.forEach((cell, index) => {\n    if (Math.floor(index / gridSize) === row) {\n      usedNumbers.add(cell)\n    }\n  })\n\n  // Column\n  const column = position % gridSize\n  grid.forEach((cell, index) => {\n    if (Math.floor(index % gridSize) === column) {\n      usedNumbers.add(cell)\n    }\n  })\n\n  // Block\n  const block = blocks[position]\n  grid.forEach((cell, index) => {\n    if (blocks[index] === block) {\n      usedNumbers.add(cell)\n    }\n  })\n\n  return !usedNumbers.has(number)\n}\n\nexport const hasZeros = grid => {\n  return grid.filter(item => item === 0).length !== 0\n}\n\nexport const getAvailableNumber = (restrictions, blockSize = 3) => {\n  const gridSize = blockSize === 3 ? 9 : 4\n  let value = null\n\n  while (!value) {\n    const number = Math.floor(Math.random() * gridSize) + 1\n    if (!restrictions.has(number)) {\n      value = number\n    }\n  }\n  return value\n}\n\nexport const getErrors = grid => {\n  return grid.filter(cell => cell.error).length\n}\n\nexport const getMissingValues = (grid, errors) => {\n  return grid.filter(cell => cell.value === null).length + errors\n}\n","<script>\n  import Info from \"./Info.svelte\";\n  import Cell from \"./Cell.svelte\";\n  import * as utils from \"./utils\";\n\n  let selectedDifficult = \"hard\";\n  let gridWithDifficult;\n  let gridWithBlockInfo;\n  let activeCellUsingKeyboard = 0;\n\n  const startGame = difficult => {\n    const grid = utils.generateGrid(3);\n    const filledGrid = utils.fillGrid(grid, 3);\n    gridWithDifficult = utils.applyGameDifficult(selectedDifficult, filledGrid);\n    gridWithBlockInfo = utils.includeBlockInfo(gridWithDifficult, 3);\n  };\n\n  const handlePen = ({ detail: { value, position } }) => {\n    const isLegal = utils.isLegal(gridWithDifficult, position, value);\n    gridWithBlockInfo = gridWithBlockInfo.map(cell => {\n      if (cell.position !== position) {\n        return cell;\n      }\n\n      return {\n        ...cell,\n        value: value !== 0 ? value : null,\n        error: !isLegal\n      };\n    });\n    gridWithDifficult[position] = value;\n  };\n\n  const handlePencil = ({ detail: { value, position } }) => {\n    if (value === 0) return;\n\n    gridWithBlockInfo = gridWithBlockInfo.map(cell => {\n      if (cell.position !== position) {\n        return cell;\n      }\n\n      const isAlreadyThere = cell.pencil.has(value);\n      if (isAlreadyThere) {\n        cell.pencil.delete(value);\n      } else {\n        cell.pencil.add(value);\n      }\n\n      return cell;\n    });\n  };\n\n  const handleChangeDifficult = ({ detail }) => {\n    selectedDifficult = detail;\n    startGame(selectedDifficult);\n  };\n\n  $: groupedGrid = utils.groupByBlock(gridWithBlockInfo);\n\n  $: errors = utils.getErrors(gridWithBlockInfo);\n  $: missingValues = utils.getMissingValues(gridWithBlockInfo, errors);\n  $: isVictory = missingValues === 0;\n\n  startGame(selectedDifficult);\n\n  window.addEventListener(\"keydown\", e => {\n    e.preventDefault();\n\n    const { key, code, ctrlKey } = e;\n    const cell = gridWithBlockInfo[activeCellUsingKeyboard];\n    const value = parseInt(key, 10);\n\n    if (code === \"ArrowDown\" && activeCellUsingKeyboard < 72) {\n      activeCellUsingKeyboard += 9;\n    } else if (code === \"ArrowUp\" && activeCellUsingKeyboard > 8) {\n      activeCellUsingKeyboard -= 9;\n    } else if (code === \"ArrowLeft\" && activeCellUsingKeyboard % 9 > 0) {\n      activeCellUsingKeyboard -= 1;\n    } else if (code === \"ArrowRight\" && activeCellUsingKeyboard % 9 < 8) {\n      activeCellUsingKeyboard += 1;\n    } else if (Number.isInteger(value)) {\n      if (cell.readonly) return;\n      const event = {\n        detail: { value: parseInt(key, 10), position: activeCellUsingKeyboard }\n      };\n      if (ctrlKey) handlePencil(event);\n      else handlePen(event);\n    }\n  });\n</script>\n\n<style>\n  .container {\n    display: flex;\n    justify-content: center;\n    padding-top: 50px;\n  }\n  .grid {\n    background-color: #aaa;\n    border: 1px solid #ccc;\n    display: grid;\n    grid-template-columns: auto auto auto;\n    grid-gap: 6px;\n  }\n  .block {\n    background-color: #ccc;\n    display: grid;\n    grid-gap: 3px;\n    grid-template-columns: auto auto auto;\n  }\n  .cell {\n    align-items: center;\n    background-color: lightyellow;\n    display: flex;\n    font-size: 2rem;\n    height: calc(80vh / 9);\n    justify-content: center;\n    position: relative;\n    user-select: none;\n    width: calc(80vh / 9);\n  }\n</style>\n\n<div class=\"container\">\n  <Info\n    on:change-difficult={handleChangeDifficult}\n    {isVictory}\n    {selectedDifficult} />\n  <div class=\"grid\">\n    {#each groupedGrid as block}\n      <div class=\"block\">\n        {#each block as cell}\n          <div class=\"cell\">\n            <Cell\n              on:pen={handlePen}\n              on:pencil={handlePencil}\n              {cell}\n              {activeCellUsingKeyboard} />\n          </div>\n        {/each}\n      </div>\n    {/each}\n  </div>\n</div>\n","import App from './App.svelte'\n\nconst app = new App({\n  target: document.body\n})\n\nexport default app\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","current_component","set_current_component","component","createEventDispatcher","type","detail","callbacks","$$","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","resolved_promise","Promise","resolve","update_scheduled","binding_callbacks","render_callbacks","flush_callbacks","add_render_callback","push","flush","seen_callbacks","Set","shift","update","callback","pop","has","add","fragment","dirty","before_render","p","ctx","after_render","outros","group_outros","remaining","check_outros","on_outro","mount_component","on_mount","on_destroy","m","new_on_destroy","map","filter","make_dirty","key","then","init","instance","create_fragment","not_equal$$1","prop_names","parent_component","props","not_equal","bound","context","Map","ready","value","hydrate","l","Array","from","childNodes","c","intro","SvelteComponent","[object Object]","this","$destroy","index","indexOf","splice","levelText","level","selectedDifficult","click_handler","levels","isVictory","dispatch","handleChange","difficult","easy","medium","hard","veryHard","insane","option","cell","pencil","attribute","error","position","activeCellUsingKeyboard","readonly","removeAttribute","setAttribute","preventDefault","putFocus","parseInt","isCtrlPressed","ctrlKey","Number","isInteger","currentTarget","querySelector","focus","blocks2","fill","flat","blocks3","generateGrid","blockSize","shuffle","j","Math","floor","random","fillGrid","grid","gridSize","stack","currentIndex","currentValue","numbers","numberIndex","hasZeros","isLegal","includeBlockInfo","blocks","block","groupByBlock","reduce","acc","numberOfCells","applyGameDifficult","indexes","size","randomIndex","number","usedNumbers","row","column","item","getErrors","getMissingValues","errors","handlePen","handlePencil","handleChangeDifficult","groupedGrid","gridWithDifficult","gridWithBlockInfo","startGame","utils.generateGrid","filledGrid","utils.fillGrid","utils.applyGameDifficult","utils.includeBlockInfo","utils.isLegal","delete","window","code","utils.groupByBlock","utils.getErrors","missingValues","utils.getMissingValues","body"],"mappings":"gCAAA,SAASA,KAgBT,SAASC,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EA+FhF,SAASE,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAEvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAExC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAiBhC,SAASQ,EAAaC,EAAYC,GAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAWG,OAAQD,GAAK,EACpCF,EAAWE,IACXF,EAAWE,GAAGE,EAAEH,GAG5B,SAASI,EAAQC,GACb,OAAOC,SAASC,cAAcF,GAkBlC,SAASG,EAAKC,GACV,OAAOH,SAASI,eAAeD,GAEnC,SAASE,IACL,OAAOH,EAAK,KAKhB,SAASI,EAAOtB,EAAMuB,EAAOC,EAASC,GAElC,OADAzB,EAAK0B,iBAAiBH,EAAOC,EAASC,GAC/B,IAAMzB,EAAK2B,oBAAoBJ,EAAOC,EAASC,GAkS1D,IAAIG,EACJ,SAASC,EAAsBC,GAC3BF,EAAoBE,EAmBxB,SAASC,IACL,MAAMD,EAAYF,EAClB,MAAO,CAACI,EAAMC,KACV,MAAMC,EAAYJ,EAAUK,GAAGD,UAAUF,GACzC,GAAIE,EAAW,CAGX,MAAMX,EA/JlB,SAAsBS,EAAMC,GACxB,MAAMG,EAAIpB,SAASqB,YAAY,eAE/B,OADAD,EAAEE,gBAAgBN,GAAM,GAAO,EAAOC,GAC/BG,EA4JeG,CAAaP,EAAMC,GACjCC,EAAUM,QAAQhD,QAAQN,IACtBA,EAAGuD,KAAKX,EAAWP,OAqBnC,MAAMmB,EAAmB,GAEnBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EACvB,MAAMC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAcxB,SAASC,EAAoBhE,GACzB8D,EAAiBG,KAAKjE,GAK1B,SAASkE,IACL,MAAMC,EAAiB,IAAIC,IAC3B,EAAG,CAGC,KAAOZ,EAAiB9B,QAAQ,CAC5B,MAAMkB,EAAYY,EAAiBa,QACnC1B,EAAsBC,GACtB0B,EAAO1B,EAAUK,IAErB,KAAOY,EAAkBnC,QACrBmC,EAAkBQ,OAAlBR,GAIJ,KAAOC,EAAiBpC,QAAQ,CAC5B,MAAM6C,EAAWT,EAAiBU,MAC7BL,EAAeM,IAAIF,KACpBA,IAEAJ,EAAeO,IAAIH,WAGtBf,EAAiB9B,QAC1B,KAAOqC,EAAgBrC,QACnBqC,EAAgBS,KAAhBT,GAEJH,GAAmB,EAEvB,SAASU,EAAOrB,GACRA,EAAG0B,WACH1B,EAAGqB,OAAOrB,EAAG2B,OACbxE,EAAQ6C,EAAG4B,eACX5B,EAAG0B,SAASG,EAAE7B,EAAG2B,MAAO3B,EAAG8B,KAC3B9B,EAAG2B,MAAQ,KACX3B,EAAG+B,aAAa1E,QAAQ0D,IAiBhC,IAAIiB,EACJ,SAASC,IACLD,EAAS,CACLE,UAAW,EACXnC,UAAW,IAGnB,SAASoC,IACAH,EAAOE,WACR/E,EAAQ6E,EAAOjC,WAGvB,SAASqC,EAASd,GACdU,EAAOjC,UAAUiB,KAAKM,GAwgB1B,SAASe,EAAgB1C,EAAW/B,EAAQI,GACxC,MAAM0D,SAAEA,EAAQY,SAAEA,EAAQC,WAAEA,EAAUR,aAAEA,GAAiBpC,EAAUK,GACnE0B,EAASc,EAAE5E,EAAQI,GAInB+C,EAAoB,KAChB,MAAM0B,EAAiBH,EAASI,IAAI5F,GAAK6F,OAAOrF,GAC5CiF,EACAA,EAAWvB,QAAQyB,GAKnBtF,EAAQsF,GAEZ9C,EAAUK,GAAGsC,SAAW,KAE5BP,EAAa1E,QAAQ0D,GAYzB,SAAS6B,EAAWjD,EAAWkD,GACtBlD,EAAUK,GAAG2B,QACdpB,EAAiBS,KAAKrB,GA3nBrBgB,IACDA,GAAmB,EACnBH,EAAiBsC,KAAK7B,IA2nBtBtB,EAAUK,GAAG2B,MAAQ3E,KAEzB2C,EAAUK,GAAG2B,MAAMkB,IAAO,EAE9B,SAASE,EAAKpD,EAAWL,EAAS0D,EAAUC,EAAiBC,EAAcC,GACvE,MAAMC,EAAmB3D,EACzBC,EAAsBC,GACtB,MAAM0D,EAAQ/D,EAAQ+D,OAAS,GACzBrD,EAAKL,EAAUK,GAAK,CACtB0B,SAAU,KACVI,IAAK,KAELuB,MAAOF,EACP9B,OAAQxE,EACRyG,UAAWJ,EACXK,MAAOvG,IAEPsF,SAAU,GACVC,WAAY,GACZX,cAAe,GACfG,aAAc,GACdyB,QAAS,IAAIC,IAAIL,EAAmBA,EAAiBpD,GAAGwD,QAAU,IAElEzD,UAAW/C,IACX2E,MAAO,MAEX,IAAI+B,GAAQ,EAp7BhB,IAAkB/E,EAq7BdqB,EAAG8B,IAAMkB,EACHA,EAASrD,EAAW0D,EAAO,CAACR,EAAKc,KAC3B3D,EAAG8B,KAAOoB,EAAalD,EAAG8B,IAAIe,GAAM7C,EAAG8B,IAAIe,GAAOc,KAC9C3D,EAAGuD,MAAMV,IACT7C,EAAGuD,MAAMV,GAAKc,GACdD,GACAd,EAAWjD,EAAWkD,MAGhCQ,EACNrD,EAAGqB,SACHqC,GAAQ,EACRvG,EAAQ6C,EAAG4B,eACX5B,EAAG0B,SAAWuB,EAAgBjD,EAAG8B,KAC7BxC,EAAQ1B,SACJ0B,EAAQsE,QAER5D,EAAG0B,SAASmC,GAt8BNlF,EAs8BiBW,EAAQ1B,OAr8BhCkG,MAAMC,KAAKpF,EAAQqF,cAy8BlBhE,EAAG0B,SAASuC,IAEZ3E,EAAQ4E,OAASvE,EAAUK,GAAG0B,SAASlD,GACvCmB,EAAUK,GAAG0B,SAASlD,IAC1B6D,EAAgB1C,EAAWL,EAAQ1B,OAAQ0B,EAAQtB,QACnDiD,KAEJvB,EAAsB0D,GAsC1B,MAAMe,EACFC,WA5GJ,IAAiBzE,EAAWpB,EAAAA,GA6GN,GA7GLoB,EA6GD0E,MA5GErE,KACV7C,EAAQwC,EAAUK,GAAGuC,YACrB5C,EAAUK,GAAG0B,SAAShD,EAAEH,GAGxBoB,EAAUK,GAAGuC,WAAa5C,EAAUK,GAAG0B,SAAW,KAClD/B,EAAUK,GAAG8B,IAAM,IAuGnBuC,KAAKC,SAAWzH,EAEpBuH,IAAIvE,EAAMyB,GACN,MAAMvB,EAAasE,KAAKrE,GAAGD,UAAUF,KAAUwE,KAAKrE,GAAGD,UAAUF,GAAQ,IAEzE,OADAE,EAAUiB,KAAKM,GACR,KACH,MAAMiD,EAAQxE,EAAUyE,QAAQlD,IACjB,IAAXiD,GACAxE,EAAU0E,OAAOF,EAAO,IAGpCH,wGChqCMM,YAAUC,2FAFLA,UAAUC,kBAAoB,SAAW,mCACtCC,sEADHF,UAAUC,kBAAoB,SAAW,2OAF7CE,oBAALrG,qCAiBU,4GAjBVA,oeAAAA,0HAAKqG,uBAALrG,4FAAAA,wBAAAA,SAAAA,SAiBCsG,oHAvGE,cAAIA,EAASH,kBACTA,KAEX,MAAMI,EAAWpF,IACXqF,EAAeC,IACnBF,EAAS,mBAAoBE,oMAGhB,CAAC,OAAQ,SAAU,OAAQ,WAAY,oBACpC,CAChBC,KAAM,OACNC,OAAQ,SACRC,KAAM,OACNC,SAAU,YACVC,OAAQ,oPCuHCjG,qBAALb,kEAAAA,oGAAAA,6DAAKa,wBAALb,4FAAAA,wBAAAA,SAAAA,6DAGI+G,yEADqBA,YAAUC,KAAKC,OAAOlE,MAAIgE,QAAU,gBAAkB,+FAAtDA,YAAUC,KAAKC,OAAOlE,MAAIgE,QAAU,gBAAkB,4FAJ/EC,KAAK9B,uBFkEb,IAAc9F,EAAM8H,EAAWhC,EAdN5G,4DExDX0I,KAAKG,MAAQ,WAAa,QAAMH,KAAKI,aAAaC,wBAA0B,iBAAmB,sCAC/FL,KAAKM,SFqELlI,IAAM8H,SACH,OADchC,UAEvB9F,EAAKmI,gBAAgBL,GAErB9H,EAAKoI,aAAaN,EAAWhC,+FAlBZ5G,IErDMkI,aFsDpB,SAAU7F,GAGb,OAFAA,EAAM8G,iBAECnJ,EAAGuD,KAAK+D,KAAMjF,oBEhEI+G,6CAGjBV,KAAK9B,wDAAL8B,KAAK9B,kBAAL8B,KAAK9B,wDACP8B,KAAKG,MAAQ,WAAa,QAAMH,KAAKI,aAAaC,wBAA0B,iBAAmB,0DAC/FL,KAAKM,4BAGXN,KAAK9B,uHAnIJ,SAAI8B,EAAIK,wBACJA,KAEX,MAEMd,EAAWpF,0LAFD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,gBAGpBK,IACnB,MAAM0D,EAAQyC,SAASnG,EAAE4C,KACnBwD,EAAgBpG,EAAEqG,QAGpBC,OAAOC,UAAU7C,IAOjBqB,EANGqB,EAMM,SALA,MAKU,CACjB1C,MAAOyC,SAASzC,EAAO,IACvBkC,SAAUJ,EAAKI,qBAMN5F,IACCA,EAAEwG,cAAcC,cAAc,SACtCC,sKC/BZ,MAAMC,EAAU,CAAC9C,MAAM,GAAG+C,KAAK,CAAC,EAAG,EAAG,EAAG,IAAK/C,MAAM,GAAG+C,KAAK,CAAC,EAAG,EAAG,EAAG,KAAKC,KACzE,GAGIC,EAAU,CACdjD,MAAM,GAAG+C,KAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACvC/C,MAAM,GAAG+C,KAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACvC/C,MAAM,GAAG+C,KAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACvCC,KAAK,GAEME,EAAe,CAACC,EAAY,KAEvC,OAAOnD,MADwB,IAAdmD,EAAkB,GAAK,IACjBJ,KAAK,IAGxBK,EAAUzJ,IACd,IAAK,IAAIe,EAAIf,EAAEgB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,MAAM2I,EAAIC,KAAKC,MAAMD,KAAKE,UAAY9I,EAAI,KACxCf,EAAEe,GAAIf,EAAE0J,IAAM,CAAC1J,EAAE0J,GAAI1J,EAAEe,IAE3B,OAAOf,GAGI8J,EAAW,CAACC,EAAMP,EAAY,KACzC,MAAMQ,EAAyB,IAAdR,EAAkB,EAAI,EAEjCS,EAAQ,GACd,IAAIC,EAAe,EACfC,EAAeJ,EAAKG,GAEpBE,EAAUX,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC3CY,EAAc,EAElB,KAAOC,GAASP,IACO,IAAjBI,EAEAI,GAAQR,EAAMG,EAAcE,EAAQC,GAAcb,IAClDa,EAAcL,GAEdD,EAAKG,GAAgBE,EAAQC,GAC7BJ,EAAM1G,KAAK2G,GACXE,EAAUX,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC3CY,GAAe,EAEfF,EAAeJ,EADfG,GAA8B,IAErBG,EAAcL,EAAW,IAClCD,EAAKG,GAAgB,EACrBA,EAAeD,EAAMnG,MACrBuG,EAAcD,EAAQrD,QAAQgD,EAAKG,IACnCH,EAAKG,GAAgB,IAIvBC,EAAeJ,EADfG,GAA8B,GAE9BE,EAAUX,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC3CY,GAAe,GAEjBA,GAA4B,EAE9B,OAAON,GAGIS,EAAmB,CAACT,EAAMP,EAAY,KACjD,MAAMiB,EAAuB,IAAdjB,EAAkBF,EAAUH,EAE3C,OAAOY,EAAK9E,IAAI,CAAC+C,EAAMlB,MACrBZ,MAAO8B,EACP0C,MAAOD,EAAO3D,GACdsB,SAAUtB,EACVwB,WAAYN,EACZC,OAAQ,IAAIvE,QAIHiH,EAAeZ,GACnBA,EAAKa,OAAO,CAACC,EAAK7C,KAEvB,MAAM0C,EAAQ1C,EAAK0C,MAAQ,EAO3B,OALIG,EAAIH,GACNG,EAAIH,GAAOnH,KAAKyE,GAEhB6C,EAAIH,GAAS,CAAC1C,GAET6C,GACN,IAGCC,EAAgB,CACpBpD,KAAM,GACNC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,OAAQ,IAGGiD,GAAqB,CAACtD,EAAWsC,KAC5C,MAAMiB,EAAU,IAAItH,IACpB,KAAOsH,EAAQC,OAAS,GAAKH,EAAcrD,IAAY,CACrD,MAAMyD,EAAcvB,KAAKC,MAAsB,GAAhBD,KAAKE,UACpCmB,EAAQhH,IAAIkH,GAEd,IAAK,MAAMpE,KAASkE,EAClBjB,EAAKjD,GAAS,KAEhB,OAAOiD,GAGIQ,GAAU,CAACR,EAAM3B,EAAU+C,EAAQ3B,EAAY,KAC1D,MAAM4B,EAAc,IAAI1H,IAElBsG,EAAyB,IAAdR,EAAkB,EAAI,EACjCiB,EAAuB,IAAdjB,EAAkBF,EAAUH,EAGrCkC,EAAM1B,KAAKC,MAAMxB,EAAW4B,GAClCD,EAAKnK,QAAQ,CAACoI,EAAMlB,KACd6C,KAAKC,MAAM9C,EAAQkD,KAAcqB,GACnCD,EAAYpH,IAAIgE,KAKpB,MAAMsD,EAASlD,EAAW4B,EAC1BD,EAAKnK,QAAQ,CAACoI,EAAMlB,KACd6C,KAAKC,MAAM9C,EAAQkD,KAAcsB,GACnCF,EAAYpH,IAAIgE,KAKpB,MAAM0C,EAAQD,EAAOrC,GAOrB,OANA2B,EAAKnK,QAAQ,CAACoI,EAAMlB,KACd2D,EAAO3D,KAAW4D,GACpBU,EAAYpH,IAAIgE,MAIZoD,EAAYrH,IAAIoH,IAGbb,GAAWP,GAC4B,IAA3CA,EAAK7E,OAAOqG,GAAiB,IAATA,GAAYvK,OAgB5BwK,GAAYzB,GAChBA,EAAK7E,OAAO8C,GAAQA,EAAKG,OAAOnH,OAG5ByK,GAAmB,CAAC1B,EAAM2B,IAC9B3B,EAAK7E,OAAO8C,GAAuB,OAAfA,EAAK9B,OAAgBlF,OAAS0K,mLC3B5C1D,+BACAK,gDAHOsD,4BACGC,8JACV5D,8DACAK,kKANAqC,mBAAL1J,yIAAAA,+FAAAA,6HAAK0J,sBAAL1J,oHAAAA,uDAAAA,qEAAAA,wGALLsG,8BACAH,gDAFoB0E,mCAIdC,yBAAL9K,4KAAAA,yJAAAA,gFAHDsG,uDACAH,wGAEM2E,4BAAL9K,uHAAAA,0EAAAA,wFAAAA,iFA5HJ,IACI+K,EACAC,EAFA7E,EAAoB,OAGpBkB,EAA0B,EAE9B,MAAM4D,EAAYxE,IAChB,MAAMsC,EAAOmC,EAAmB,GAC1BC,EAAaC,EAAerC,EAAM,GACxCgC,EAAoBM,GAAyBlF,EAAmBgF,yBAChEH,EAAoBM,EAAuBP,EAAmB,KAG1DJ,EAAY,EAAGtJ,QAAU6D,MAAAA,EAAOkC,SAAAA,OACpC,MAAMmC,EAAUgC,GAAcR,EAAmB3D,EAAUlC,yBAC3D8F,EAAoBA,EAAkB/G,IAAI+C,GACpCA,EAAKI,WAAaA,EACbJ,EAGF,IACFA,EACH9B,MAAiB,IAAVA,EAAcA,EAAQ,KAC7BiC,OAAQoC,KAGZwB,EAAkB3D,GAAYlC,GAG1B0F,EAAe,EAAGvJ,QAAU6D,MAAAA,EAAOkC,SAAAA,OACzB,IAAVlC,yBAEJ8F,EAAoBA,EAAkB/G,IAAI+C,IACxC,GAAIA,EAAKI,WAAaA,EACpB,OAAOJ,EAUT,OAPuBA,EAAKC,OAAOlE,IAAImC,GAErC8B,EAAKC,OAAOuE,OAAOtG,GAEnB8B,EAAKC,OAAOjE,IAAIkC,GAGX8B,yBAeXiE,IAEAQ,OAAO3K,iBAAiB,UAAWU,IACjCA,EAAEiG,iBAEF,MAAMrD,IAAEA,EAAGsH,KAAEA,EAAI7D,QAAEA,GAAYrG,EACzBwF,EAAOgE,EAAkB3D,GACzBnC,EAAQyC,SAASvD,EAAK,IAE5B,GAAa,cAATsH,GAAwBrE,EAA0B,+BACpDA,GAA2B,QACtB,GAAa,YAATqE,GAAsBrE,EAA0B,8BACzDA,GAA2B,QACtB,GAAa,cAATqE,GAAwBrE,EAA0B,EAAI,8BAC/DA,GAA2B,QACtB,GAAa,eAATqE,GAAyBrE,EAA0B,EAAI,8BAChEA,GAA2B,QACtB,GAAIS,OAAOC,UAAU7C,GAAQ,CAClC,GAAI8B,EAAKM,SAAU,OACnB,MAAM3G,EAAQ,CACZU,OAAQ,CAAE6D,MAAOyC,SAASvD,EAAK,IAAKgD,SAAUC,IAE5CQ,EAAS+C,EAAajK,GACrBgK,EAAUhK,6GA7BhBmK,EAAca,EAAmBX,oCAEjCN,EAASkB,GAAgBZ,uDACzBa,EAAgBC,GAAuBd,EAAmBN,mCAC1DpE,EAA8B,IAAlBuF,qGATe,EAAGxK,OAAAA,4BAC/B8E,EAAoB9E,GACpB4J,uCCpDQ,kEAAQ,CAClB9L,OAAQiB,SAAS2L"}